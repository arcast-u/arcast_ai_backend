generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Studio {
    id              String    @id @default(uuid())
    name            String
    location        String
    imageUrl        String
    totalSeats      Int
    openingTime     String    // Store as "HH:mm" format
    closingTime     String    // Store as "HH:mm" format
    createdAt       DateTime  @default(now())
    updatedAt       DateTime  @updatedAt
    bookings        Booking[]
    packages        StudioPackage[]
}

model StudioPackage {
    id              String    @id @default(uuid())
    name            String
    price_per_hour  Decimal   @db.Decimal(10, 2)
    currency        String    @default("AED")
    description     String
    delivery_time   Int
    studios         Studio[]  // Changed to allow multiple studios
    bookings        Booking[]
    packagePerks    PackagePerk[]
    createdAt       DateTime  @default(now())
    updatedAt       DateTime  @updatedAt
}

model PackagePerk {
    id              String    @id @default(uuid())
    name            String
    count           Int?      // Optional count for items like "3x Sony cameras"
    packageId       String
    package         StudioPackage @relation(fields: [packageId], references: [id])
    createdAt       DateTime  @default(now())
    updatedAt       DateTime  @updatedAt
}

model DiscountCode {
    id          String      @id @default(cuid())
    code        String      @unique
    type        DiscountType
    value       Float
    maxUses     Int?
    usedCount   Int         @default(0)
    startDate   DateTime
    endDate     DateTime
    isActive    Boolean     @default(true)
    minAmount   Float?      // Minimum booking amount required
    firstTimeOnly Boolean   @default(false) // Flag to indicate if this code is for first-time clients only
    bookings    Booking[]   // Relation to bookings that used this code
    createdAt   DateTime    @default(now())
    updatedAt   DateTime    @updatedAt

    @@index([code])
}

enum DiscountType {
    PERCENTAGE
    FIXED_AMOUNT
}

model Booking {
    id                  String    @id @default(uuid())
    startTime           DateTime
    endTime             DateTime
    numberOfSeats       Int
    totalCost           Decimal   @db.Decimal(10, 2)
    vatAmount           Decimal   @db.Decimal(10, 2)
    discountAmount      Decimal?  @db.Decimal(10, 2)
    status              BookingStatus @default(PENDING)
    studioId            String
    studio              Studio    @relation(fields: [studioId], references: [id])
    packageId           String
    package             StudioPackage @relation(fields: [packageId], references: [id])
    leadId              String
    lead                Lead      @relation(fields: [leadId], references: [id])
    discountCodeId      String?
    discountCode        DiscountCode?  @relation(fields: [discountCodeId], references: [id])
    additionalServices  BookingAdditionalService[]
    createdAt           DateTime  @default(now())
    updatedAt           DateTime  @updatedAt
}

model Lead {
    id                String    @id @default(uuid())
    fullName          String
    email             String?   // Made optional
    phoneNumber       String
    whatsappNumber    String?   // Optional WhatsApp number
    recordingLocation String?
    bookings          Booking[]
    createdAt         DateTime  @default(now())
    updatedAt         DateTime  @updatedAt
}

enum BookingStatus {
    PENDING
    CONFIRMED
    CANCELLED
    COMPLETED
}

enum AdditionalServiceType {
    STANDARD_EDIT_SHORT_FORM
    CUSTOM_EDIT_SHORT_FORM
    STANDARD_EDIT_LONG_FORM
    CUSTOM_EDIT_LONG_FORM
    LIVE_VIDEO_CUTTING
    SUBTITLES
    TELEPROMPTER_SUPPORT
    MULTI_CAM_RECORDING
}

model AdditionalService {
    id              String    @id @default(uuid())
    title           String
    type            AdditionalServiceType
    price           Decimal   @db.Decimal(10, 2)
    currency        String    @default("AED")
    count           Int       @default(1)
    description     String
    imageUrls       String[]  // Array of image URLs
    videoUrl        String?   // Optional video URL
    isActive        Boolean   @default(true)
    createdAt       DateTime  @default(now())
    updatedAt       DateTime  @updatedAt
    bookingServices BookingAdditionalService[]
}

model BookingAdditionalService {
    id                  String            @id @default(uuid())
    bookingId           String
    booking             Booking           @relation(fields: [bookingId], references: [id])
    additionalServiceId String
    additionalService   AdditionalService @relation(fields: [additionalServiceId], references: [id])
    quantity            Int               @default(1)
    price               Decimal           @db.Decimal(10, 2)
    createdAt           DateTime          @default(now())
    updatedAt           DateTime          @updatedAt

    @@unique([bookingId, additionalServiceId])
}
